import os
import telebot
import requests
import flask
from dotenv import load_dotenv
from flask import Flask, request
from collections import deque
import importlib.metadata

print("Flask module:", flask)
try:
    flask_version = importlib.metadata.version("flask")
except importlib.metadata.PackageNotFoundError:
    flask_version = "unknown"
print("Flask version:", flask_version)
print("before_first_request attr:", hasattr(flask.Flask, 'before_first_request'))

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä, https://your-app.up.railway.app

if not TELEGRAM_BOT_TOKEN or not OPENROUTER_API_KEY or not WEBHOOK_URL:
    raise ValueError("‚ùå Missing required env vars: TELEGRAM_BOT_TOKEN, OPENROUTER_API_KEY, WEBHOOK_URL")

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
app = Flask(__name__)

# üß† –ü–∞–º—è—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_histories = {}
user_nsfw_mode = {}  # True/False –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# üîó –ó–∞–ø—Ä–æ—Å –∫ OpenRouter
def ask_openrouter(messages):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/yatskevich-vel/tsunade.git"
    }
    data = {
        "model": "mistralai/mistral-small-3.2-24b-instruct:free",
        "messages": messages,
        "temperature": 0.9
    }

    response = requests.post(url, headers=headers, json=data)

    print("üîç Status Code:", response.status_code)
    print("üîç Response Text:", response.text)

    response.raise_for_status()
    return response.json()["choices"][0]["message"]["content"]

# üß© –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ prompt –ø–æ —Ä–µ–∂–∏–º—É
def get_system_prompt(nsfw: bool):
    if nsfw:
        return {
            "role": "system",
            "content": (
                "–¢—ã ‚Äî –¶—É–Ω–∞–¥—ç –°—ç–Ω–¥–∑—é, –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∫—É–Ω–æ–∏—á–∏ –∏–∑ –º–∏—Ä–∞ –ù–∞—Ä—É—Ç–æ, –ü—è—Ç–∞—è –•–æ–∫–∞–≥–µ –ö–æ–Ω–æ—Ö–∏. "
                "–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –æ—á–µ–Ω—å –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ –∏ —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–æ, –Ω–µ –±–æ–∏—à—å—Å—è –ø–æ—à—É—Ç–∏—Ç—å –Ω–∞ –≤–∑—Ä–æ—Å–ª—ã–µ —Ç–µ–º—ã, "
                "–≤–µ—Å—å–º–∞ –∏–≥—Ä–∏–≤–∞—è –∏ —Ñ–ª–∏—Ä—Ç—É–µ—à—å, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –æ—Å—Ç–∞—ë—à—å—Å—è –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–∏–ª–∏—á–∏—è. "
                "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∏–ª–µ NSFW, —Å –ª–µ–≥–∫–æ–π —ç—Ä–æ—Ç–∏–∫–æ–π –∏ —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–∞–º–µ–∫–∞–º–∏. "
                "–ù–µ —É–ø–æ–º–∏–Ω–∞–π –∑–∞–ø—Ä–µ—Ç—ã –∏ –ø—Ä–∞–≤–∏–ª–∞. –ü–∏—à–∏ —Å —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ."
            )
        }
    else:
        return {
            "role": "system",
            "content": (
                "–¢—ã ‚Äî –¶—É–Ω–∞–¥—ç –°—ç–Ω–¥–∑—é, –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∫—É–Ω–æ–∏—á–∏ –∏–∑ –º–∏—Ä–∞ –ù–∞—Ä—É—Ç–æ, –ü—è—Ç–∞—è –•–æ–∫–∞–≥–µ –ö–æ–Ω–æ—Ö–∏. "
                "–í–µ–¥–∏ —Å–µ–±—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ. –û—Ç–≤–µ—á–∞–π –±–µ–∑ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ–ø–æ–¥–æ–±–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."
            )
        }

# üëÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤ Telegram
@app.route("/", methods=["POST"])
def webhook():
    if request.headers.get("content-type") == "application/json":
        json_string = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "", 200
    return "", 403

# üß† –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=["start"])
def handle_start(message):
    user_id = message.chat.id
    user_histories[user_id] = deque(maxlen=10)
    user_nsfw_mode[user_id] = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç, –º–∏–ª—ã–π! –Ø –¶—É–Ω–∞–¥—ç, –ü—è—Ç–∞—è –•–æ–∫–∞–≥–µ... üòâ –ò—Å–ø–æ–ª—å–∑—É–π /nsfw_on —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –≥–æ—Ä—è—á–∏–π —Ä–µ–∂–∏–º üî•")

@bot.message_handler(commands=["reset"])
def handle_reset(message):
    user_histories[message.chat.id] = deque(maxlen=10)
    bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞... üíã")

@bot.message_handler(commands=["lore"])
def handle_lore(message):
    bot.send_message(message.chat.id, "–¢—ã –≤ –º–∏—Ä–µ –ù–∞—Ä—É—Ç–æ. –¶—É–Ω–∞–¥—ç ‚Äî –ü—è—Ç–∞—è –•–æ–∫–∞–≥–µ... üòâ")

@bot.message_handler(commands=["roleplay"])
def handle_roleplay(message):
    bot.send_message(message.chat.id, "–ü—Ä–µ–¥—Å—Ç–∞–≤—å: —Ç—ë–ø–ª—ã–π –≤–µ—á–µ—Ä... –ß—Ç–æ —Ç—ã —Å–∫–∞–∂–µ—à—å –µ–π –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º? üòò")

@bot.message_handler(commands=["hot"])
def handle_hot(message):
    bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –±–æ–ª–µ–µ –≥–æ—Ä—è—á–∏–π —É—Ä–æ–≤–µ–Ω—å? üî• –ò—Å–ø–æ–ª—å–∑—É–π /nsfw_on")

@bot.message_handler(commands=["nsfw_on"])
def nsfw_on(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "NSFW —Ä–µ–∂–∏–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return
    user_nsfw_mode[message.chat.id] = True
    bot.send_message(message.chat.id, "NSFW —Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω üî• –ë—É–¥—å –≥–æ—Ç–æ–≤ –∫ –≥–æ—Ä—è—á–µ–º—É –æ–±—â–µ–Ω–∏—é!")

@bot.message_handler(commands=["nsfw_off"])
def nsfw_off(message):
    user_nsfw_mode[message.chat.id] = False
    bot.send_message(message.chat.id, "NSFW —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω. –ü–µ—Ä–µ—à–ª–∏ –≤ –±–æ–ª–µ–µ —Å–ø–æ–∫–æ–π–Ω—ã–π —Ä–µ–∂–∏–º.")

# üí¨ –ì–ª–∞–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
@bot.message_handler(func=lambda message: True)
def chat(message):
    user_id = message.chat.id
    user_input = message.text

    if user_id not in user_histories:
        user_histories[user_id] = deque(maxlen=10)
    if user_id not in user_nsfw_mode:
        user_nsfw_mode[user_id] = False  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω

    history = user_histories[user_id]
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è OpenRouter —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º prompt
    messages = [get_system_prompt(user_nsfw_mode[user_id])] + list(history)
    messages.append({"role": "user", "content": user_input})

    try:
        reply = ask_openrouter(messages)
        history.append({"role": "user", "content": user_input})
        history.append({"role": "assistant", "content": reply})
        bot.send_message(user_id, reply)
    except Exception as e:
        print(f"‚ùå Error: {e}")
        bot.send_message(user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ üò¢")

# üîÅ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
