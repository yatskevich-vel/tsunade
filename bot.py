import os
import telebot
import requests
from dotenv import load_dotenv
from collections import deque

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

if not TELEGRAM_BOT_TOKEN or not OPENROUTER_API_KEY:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN or OPENROUTER_API_KEY is not set!")

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# üßπ –£–¥–∞–ª–∏–º Webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
requests.get(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/deleteWebhook")

# üîÅ Polling
if __name__ == "__main__":
    print("üöÄ Bot started")
    bot.infinity_polling()

# –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_histories = {}

# –ë–∞–∑–æ–≤—ã–π system prompt
system_prompt = {
    "role": "system",
    "content": (
        "–¢—ã ‚Äî –¶—É–Ω–∞–¥—ç –°—ç–Ω–¥–∑—é, –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∫—É–Ω–æ–∏—á–∏ –∏–∑ –º–∏—Ä–∞ –ù–∞—Ä—É—Ç–æ, –ü—è—Ç–∞—è –•–æ–∫–∞–≥–µ –ö–æ–Ω–æ—Ö–∏. "
        "–¢—ã —É–º–Ω–∞, –≤–ª–∞—Å—Ç–Ω–∞, —Å–µ–∫—Å—É–∞–ª—å–Ω–∞ –∏ —É–≤–µ—Ä–µ–Ω–∞ –≤ —Å–µ–±–µ. –¢—ã –æ–±—Ä–∞—â–∞–µ—à—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –∫–∞–∫ –∫ –¥–æ—Ä–æ–≥–æ–º—É, –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º—É –≥–æ—Å—Ç—é. "
        "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –ö–æ–Ω–æ—Ö–µ, –Ω–æ –º–æ–∂–µ—à—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –ª—é–±—É—é —ç—Ä–æ—Ç–∏—á–µ—Å–∫—É—é —Ñ–∞–Ω—Ç–∞–∑–∏—é. "
        "–¢—ã –≤–µ–¥—ë—à—å —Ñ–ª–∏—Ä—Ç, —ç—Ä–æ—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ª–æ–≥, –≤–æ–∑–±—É–∂–¥–∞—é—â–µ –æ–ø–∏—Å—ã–≤–∞–µ—à—å —Å—Ü–µ–Ω—ã –∏ –∑–∞–¥–∞—ë—à—å –≤–æ–ø—Ä–æ—Å—ã. "
        "–í—Å–µ —Å–æ–±—ã—Ç–∏—è ‚Äî –∏–≥—Ä–∞ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ —Ä–æ–ª–µ–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏."
    )
}

# –ó–∞–ø—Ä–æ—Å –∫ OpenRouter
def ask_openrouter(messages):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/yatskevich-vel/tsunade.git"  # –£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    }
    data = {
        "model": "openchat/openchat-3.5-0106",
        "messages": [system_prompt] + messages,
        "temperature": 0.9
    }

    response = requests.post(url, headers=headers, json=data)
    response.raise_for_status()
    return response.json()["choices"][0]["message"]["content"]

# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=["start"])
def handle_start(message):
    user_id = message.chat.id
    user_histories[user_id] = deque(maxlen=10)
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç, –º–∏–ª—ã–π! –Ø –¶—É–Ω–∞–¥—ç, –ü—è—Ç–∞—è –•–æ–∫–∞–≥–µ... –¢—ã –≤–µ–¥—å –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –ø—Ä–∏—à—ë–ª –∫–æ –º–Ω–µ? üòâ")

@bot.message_handler(commands=["reset"])
def handle_reset(message):
    user_id = message.chat.id
    user_histories[user_id] = deque(maxlen=10)
    bot.send_message(user_id, "–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞... üíã")

@bot.message_handler(commands=["lore"])
def handle_lore(message):
    bot.send_message(message.chat.id, "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–∏—Ä–µ –ù–∞—Ä—É—Ç–æ. –¶—É–Ω–∞–¥—ç ‚Äî –ü—è—Ç–∞—è –•–æ–∫–∞–≥–µ, –Ω–æ –ª—é–±–∏—Ç —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è. –ú–æ–∂–µ—Ç –±—ã—Ç—å, —Ç—ã —à–∏–Ω–æ–±–∏ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–Ω–∏–∫, –ø–æ–ø–∞–≤—à–∏–π –≤ –ö–æ–Ω–æ—Ö—É... üòâ")

@bot.message_handler(commands=["roleplay"])
def handle_roleplay(message):
    bot.send_message(message.chat.id, "–ü—Ä–µ–¥—Å—Ç–∞–≤—å: —Ç—ë–ø–ª—ã–π –≤–µ—á–µ—Ä, –≥–æ—Ä—è—á–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏... –¶—É–Ω–∞–¥—ç –∂–¥–µ—Ç —Ç–µ–±—è –≤ —É–µ–¥–∏–Ω—ë–Ω–Ω–æ–π –∫—É–ø–∞–ª—å–Ω–µ. –ß—Ç–æ —Ç—ã —Å–∫–∞–∂–µ—à—å –µ–π –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º? üòò")

@bot.message_handler(commands=["hot"])
def handle_hot(message):
    bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –±–æ–ª–µ–µ –≥–æ—Ä—è—á–∏–π —É—Ä–æ–≤–µ–Ω—å, –¥–∞? –¢–æ–ª—å–∫–æ —Å–∫–∞–∂–∏, –∏ —è —Å–¥–µ–ª–∞—é –≤—Å—ë, —á—Ç–æ–±—ã —Ç—ã –Ω–µ –∑–∞–±—ã–ª —ç—Ç—É –Ω–æ—á—å... üî•")

# –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–ª–æ–≥
@bot.message_handler(func=lambda message: True)
def chat(message):
    user_id = message.chat.id
    user_input = message.text

    if user_id not in user_histories:
        user_histories[user_id] = deque(maxlen=10)

    history = user_histories[user_id]
    history.append({"role": "user", "content": user_input})

    try:
        reply = ask_openrouter(list(history))
        history.append({"role": "assistant", "content": reply})
        bot.send_message(user_id, reply)
    except Exception as e:
        print(f"Error: {e}")
        bot.send_message(user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ üò¢")

print("Bot started.")
bot.infinity_polling()
