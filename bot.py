import os
import telebot
import requests
import flask 
from dotenv import load_dotenv
from flask import Flask, request
from collections import deque

print("Flask module:", flask)
print("Flask version:", flask.__version__)
print("before_first_request attr:", hasattr(flask.Flask, 'before_first_request'))

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä, https://your-app.up.railway.app/webhook

if not TELEGRAM_BOT_TOKEN or not OPENROUTER_API_KEY or not WEBHOOK_URL:
    raise ValueError("‚ùå Missing required env vars: TELEGRAM_BOT_TOKEN, OPENROUTER_API_KEY, WEBHOOK_URL")

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
app = Flask(__name__)

# üß† –ü–∞–º—è—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_histories = {}

# üîß Prompt
system_prompt = {
    "role": "system",
    "content": (
        "–¢—ã ‚Äî –¶—É–Ω–∞–¥—ç –°—ç–Ω–¥–∑—é, –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∫—É–Ω–æ–∏—á–∏ –∏–∑ –º–∏—Ä–∞ –ù–∞—Ä—É—Ç–æ, –ü—è—Ç–∞—è –•–æ–∫–∞–≥–µ –ö–æ–Ω–æ—Ö–∏..."
    )
}

# üîó –ó–∞–ø—Ä–æ—Å –∫ OpenRouter
def ask_openrouter(messages):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/yatskevich-vel/tsunade.git"
    }
    data = {
        "model": "openchat/openchat-3.5-0106",
        "messages": [system_prompt] + messages,
        "temperature": 0.9
    }
    response = requests.post(url, headers=headers, json=data)
    response.raise_for_status()
    return response.json()["choices"][0]["message"]["content"]

# üëÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤ Telegram
@app.route("/", methods=["POST"])
def webhook():
    if request.headers.get("content-type") == "application/json":
        json_string = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return "", 200
    return "", 403

# üß† –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=["start"])
def handle_start(message):
    user_id = message.chat.id
    user_histories[user_id] = deque(maxlen=10)
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç, –º–∏–ª—ã–π! –Ø –¶—É–Ω–∞–¥—ç, –ü—è—Ç–∞—è –•–æ–∫–∞–≥–µ... üòâ")

@bot.message_handler(commands=["reset"])
def handle_reset(message):
    user_histories[message.chat.id] = deque(maxlen=10)
    bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞... üíã")

@bot.message_handler(commands=["lore"])
def handle_lore(message):
    bot.send_message(message.chat.id, "–¢—ã –≤ –º–∏—Ä–µ –ù–∞—Ä—É—Ç–æ. –¶—É–Ω–∞–¥—ç ‚Äî –ü—è—Ç–∞—è –•–æ–∫–∞–≥–µ... üòâ")

@bot.message_handler(commands=["roleplay"])
def handle_roleplay(message):
    bot.send_message(message.chat.id, "–ü—Ä–µ–¥—Å—Ç–∞–≤—å: —Ç—ë–ø–ª—ã–π –≤–µ—á–µ—Ä... –ß—Ç–æ —Ç—ã —Å–∫–∞–∂–µ—à—å –µ–π –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º? üòò")

@bot.message_handler(commands=["hot"])
def handle_hot(message):
    bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –±–æ–ª–µ–µ –≥–æ—Ä—è—á–∏–π —É—Ä–æ–≤–µ–Ω—å? üî•")

# üí¨ –ì–ª–∞–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
@bot.message_handler(func=lambda message: True)
def chat(message):
    user_id = message.chat.id
    user_input = message.text

    if user_id not in user_histories:
        user_histories[user_id] = deque(maxlen=10)

    history = user_histories[user_id]
    history.append({"role": "user", "content": user_input})

    try:
        reply = ask_openrouter(list(history))
        history.append({"role": "assistant", "content": reply})
        bot.send_message(user_id, reply)
    except Exception as e:
        print(f"‚ùå Error: {e}")
        bot.send_message(user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ üò¢")

# üîÅ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

# üöÄ –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
